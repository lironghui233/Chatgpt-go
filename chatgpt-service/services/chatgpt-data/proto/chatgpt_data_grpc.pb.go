// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: proto/chatgpt_data.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatGPTDataClient is the client API for ChatGPTData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGPTDataClient interface {
	// 服务方法定义
	AddRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RecordRes, error)
}

type chatGPTDataClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGPTDataClient(cc grpc.ClientConnInterface) ChatGPTDataClient {
	return &chatGPTDataClient{cc}
}

func (c *chatGPTDataClient) AddRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RecordRes, error) {
	out := new(RecordRes)
	err := c.cc.Invoke(ctx, "/leoh_package.ChatGPTData/AddRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatGPTDataServer is the server API for ChatGPTData service.
// All implementations must embed UnimplementedChatGPTDataServer
// for forward compatibility
type ChatGPTDataServer interface {
	// 服务方法定义
	AddRecord(context.Context, *Record) (*RecordRes, error)
	mustEmbedUnimplementedChatGPTDataServer()
}

// UnimplementedChatGPTDataServer must be embedded to have forward compatible implementations.
type UnimplementedChatGPTDataServer struct {
}

func (UnimplementedChatGPTDataServer) AddRecord(context.Context, *Record) (*RecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (UnimplementedChatGPTDataServer) mustEmbedUnimplementedChatGPTDataServer() {}

// UnsafeChatGPTDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGPTDataServer will
// result in compilation errors.
type UnsafeChatGPTDataServer interface {
	mustEmbedUnimplementedChatGPTDataServer()
}

func RegisterChatGPTDataServer(s grpc.ServiceRegistrar, srv ChatGPTDataServer) {
	s.RegisterService(&ChatGPTData_ServiceDesc, srv)
}

func _ChatGPTData_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGPTDataServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leoh_package.ChatGPTData/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGPTDataServer).AddRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatGPTData_ServiceDesc is the grpc.ServiceDesc for ChatGPTData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGPTData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leoh_package.ChatGPTData",
	HandlerType: (*ChatGPTDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecord",
			Handler:    _ChatGPTData_AddRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chatgpt_data.proto",
}
